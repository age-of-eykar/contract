%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.bool import TRUE, FALSE
from starkware.starknet.common.syscalls import get_caller_address, get_block_timestamp
from starkware.cairo.common.math import assert_le

from contracts.convoys.library import assert_can_spend_convoy, has_convoy
from contracts.map.world import Plot, Structure, world, world_update
from contracts.colonies import find_redirected_colony
from contracts.map.biomes import assert_jungle_or_forest, assert_not_ocean
from contracts.convoys.conveyables.fungibles import Fungibles
from contracts.convoys.conveyables.fungibles.wood import Wood, wood_balances
from contracts.convoys.conveyables.fungibles.human import human_balances

@storage_var
func exploitation_start(x: felt, y: felt) -> (timestamp: felt) {
}

func _build_lumber_camp{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(
    convoy_id: felt, x: felt, y: felt
) -> () {
    // Build a lumber camp at the given location.
    //
    // Parameters:
    //   convoy_id: The id of the convoy.
    //   x: The x coordinate of the lumber camp.
    //   y: The y coordinate of the lumber camp.
    alloc_locals;
    let (test) = has_convoy(convoy_id, x, y);
    assert test = TRUE;

    let (existing_plot: Plot) = world.read(x, y);
    if (existing_plot.structure != Structure.NONE and existing_plot.structure != Structure.SETTLER_CAMP) {
        assert 1 = 0;
    }

    let (colony) = find_redirected_colony(existing_plot.owner);
    let (caller) = get_caller_address();
    assert colony.owner = caller;
    assert_can_spend_convoy(convoy_id, caller);
    assert_jungle_or_forest(x, y);
    
    // remove 200 humans
    let (human_amount) = Fungibles.amount(human_balances.addr, convoy_id);
    assert_le(200, human_amount);
    Fungibles.set(human_balances.addr, convoy_id, human_amount - 200);

    let (timestamp) = get_block_timestamp();

    // 60sec = 1min
    exploitation_start.write(x, y, timestamp + 60);
    world.write(x, y, Plot(colony.owner, Structure.LUMBER_CAMP, timestamp + 60, stored=0));
    return ();
}

func _build_town{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(
    convoy_id: felt, x: felt, y: felt
) -> () {
    // Build a town at the given location.
    //
    // Parameters:
    //   convoy_id: The id of the convoy.
    //   x: The x coordinate of the town.
    //   y: The y coordinate of the town.
    alloc_locals;
    let (test) = has_convoy(convoy_id, x, y);
    assert test = TRUE;

    let (existing_plot: Plot) = world.read(x, y);
    if (existing_plot.structure != Structure.NONE and
        existing_plot.structure != Structure.SETTLER_CAMP) {
        assert 1 = 0;
    }

    let (colony) = find_redirected_colony(existing_plot.owner);
    let (caller) = get_caller_address();
    assert colony.owner = caller;
    assert_can_spend_convoy(convoy_id, caller);
    assert_not_ocean(x, y);
    
    // remove 3000 woods
    let (wood_amount) = Fungibles.amount(wood_balances.addr, convoy_id);
    assert_le(3000, wood_amount);
    Fungibles.set(wood_balances.addr, convoy_id, wood_amount - 3000);

    let (timestamp) = get_block_timestamp();

    // 60sec = 1min
    world.write(x, y, Plot(colony.owner, Structure.TOWN, timestamp + 60, stored=0));
    return ();
}

func _build_barrack{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(
    convoy_id: felt, x: felt, y: felt
) -> () {
    // Build barracks at the given location.
    //
    // Parameters:
    //   convoy_id: The id of the convoy.
    //   x: The x coordinate of the barracks.
    //   y: The y coordinate of the barracks.
    alloc_locals;
    let (test) = has_convoy(convoy_id, x, y);
    assert test = TRUE;

    let (existing_plot: Plot) = world.read(x, y);
    if (existing_plot.structure != Structure.NONE and existing_plot.structure != Structure.SETTLER_CAMP) {
        assert 1 = 0;
    }

    let (colony) = find_redirected_colony(existing_plot.owner);
    let (caller) = get_caller_address();
    assert colony.owner = caller;
    assert_can_spend_convoy(convoy_id, caller);
    assert_not_ocean(x, y);

    // remove 1500 humans
    let (human_amount) = Fungibles.amount(human_balances.addr, convoy_id);
    assert_le(1500, human_amount);
    Fungibles.set(human_balances.addr, convoy_id, human_amount - 1500);

    // remove 1500 woods
    let (wood_amount) = Fungibles.amount(wood_balances.addr, convoy_id);
    assert_le(1500, wood_amount);
    Fungibles.set(wood_balances.addr, convoy_id, wood_amount - 1500);

    let (timestamp) = get_block_timestamp();

    // 60sec = 1min
    world.write(x, y, Plot(colony.owner, Structure.TOWN, timestamp + 60, stored=0));
    return ();
}
