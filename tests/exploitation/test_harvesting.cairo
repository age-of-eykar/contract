%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.bool import TRUE, FALSE
from starkware.cairo.common.math_cmp import is_le
from contracts.exploitation.harvesting import _harvest
from contracts.convoys.conveyables.fungibles import Fungibles
from contracts.convoys.conveyables.fungibles.soldier import soldier_balances
from contracts.convoys.conveyables.fungibles.wood import wood_balances
from contracts.convoys.conveyables.fungibles.human import human_balances
from contracts.eykar import (
    mint,
    harvest,
    move_convoy,
    conquer,
    build_lumber_camp,
    build_town,
    build_barrack
)
from contracts.map.world import world, Plot

@view
func test_harvest{syscall_ptr: felt*, range_check_ptr, pedersen_ptr: HashBuiltin*}() {
    alloc_locals;
    // create colony in (0, 0) and harvest 500 humans from settler_camp
    %{
        warp(0)
    %}
    mint('hello');
    %{ warp(36000) %}
    harvest(1, 0, 0);

    // move to (0, 3), create a lumber camp and harvest 3000 woods
    move_convoy(1, 0, 0, 0, 3);
    %{ warp(36000+3600) %}
    conquer(1, 0, 3, 0);
    build_lumber_camp(1, 0, 3);
    %{ warp(36000+3600+480000) %}
    harvest(1, 0, 3);
    
    // go back to (0, 0) and replace settler_camp with a town, then harvest 1500 humans from it
    move_convoy(1, 0, 3, 0, 0);
    %{ warp(36000+3600+480000+3600) %}
    build_town(1, 0, 0);
    %{ warp(36000+3600+480000+3600+54000) %}
    harvest(1, 0, 0);
    let (amount) = Fungibles.amount(human_balances.addr, 1);
    let test = is_le(1500, amount);
    assert test = TRUE;

    // go back to (0, 3) and harvest 1500 wood
    move_convoy(1, 0, 0, 0, 3);
    %{ warp(36000+3600+480000+3600+54000+220000) %}
    harvest(1, 0, 3);
    let (amount) = Fungibles.amount(wood_balances.addr, 1);
    let test = is_le(1500, amount);
    assert test = TRUE;

    // go to (-3, 4), conquer the plot and build a barrack on it, and harvest 100 soldiers
    move_convoy(1, 0, 3, -3, 4);
    %{ warp(36000+3600+480000+3600+54000+220000+3600) %}
    conquer(1, -3, 4, 0);
    build_barrack(1, -3, 4);
    %{ warp(36000+3600+480000+3600+54000+220000+3600+1260) %}
    harvest(1, -3, 4);
    
    // test soldier_balances
    //let (amount) = Fungibles.amount(soldier_balances.addr, 1);
    //let test = is_le(1, amount);
    //assert test = TRUE;
    return ();
}
