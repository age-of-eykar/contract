%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin
from contracts.utils.cairo_math_64x61.math64x61 import Math64x61
from contracts.exploitation.production import compute_production, compute_exploitation
from starkware.cairo.common.math import unsigned_div_rem

@view
func test_production{syscall_ptr: felt*, range_check_ptr, pedersen_ptr: HashBuiltin*}() {
    // Real life example

    // [Parameters]
    // Î”t = 10 hours
    // q = 150 fishes
    // max_q = 100 000
    // affine_growth = 0.001 fish/s
    // linear_growth = +1%/day = 1.01/day = exp(ln(1.01)/86400) /s = 1.00000011517 * (2 ** 61)

    // [Meaning]
    // duration: 10 hours
    // initial fish population: 150 fishes
    // maximum population size: 100000
    // affine_growth: one new fish comes to this plot every 1000.0 seconds
    // linear_growth: fish population increases 1.0% every day

    let (thounsandth, _) = unsigned_div_rem(Math64x61.ONE, 1000);
    let amount_of_fish = compute_production(36000, 150, 100000, thounsandth, 2305843274777633300);
    assert amount_of_fish = 186;

    return ();
}

@view
func test_exploitation{syscall_ptr: felt*, range_check_ptr, pedersen_ptr: HashBuiltin*}() {
    // Real life example

    // [Parameters]
    // new_q: 4650
    // extraction_speed = 10 people
    // affine_extraction = 1 fish/speed point ~= 0.001 fish/sp = 2 ** 58
    // linear_extraction = +1%/speed point = exp(ln(1.01)/3600) = 1.00000276398 * (2 ** 61)

    // [Meaning]
    // population size: 4650
    // amount of fishermen: 10.0
    // initial fish population: 150 fishes
    // affine_extraction: 1 fish is fished per human
    // linear_extraction: 1% of fish population is fished per human

    alloc_locals;
    let (percent, _) = unsigned_div_rem(Math64x61.ONE, 100);
    let fished_amount = compute_exploitation(4650, 10 * Math64x61.ONE, Math64x61.ONE, percent);
    assert fished_amount = 474;

    // Testing 0 affine and linear
    let fished_amount = compute_exploitation(1000, 10 * Math64x61.ONE, 0, 0);
    assert fished_amount = 0;

    // Testing no linear, 1 fish per human, 10 humans
    let fished_amount = compute_exploitation(1000, 10 * Math64x61.ONE, Math64x61.ONE, 0);
    assert fished_amount = 10;

    // Testing no affine, 1% of fishes per human, 10 humans
    let fished_amount = compute_exploitation(1000, 10 * Math64x61.ONE, 0, percent);
    assert fished_amount = 99;

    return ();
}
